// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using EBikeLibrary.Entities;
using Microsoft.EntityFrameworkCore;

namespace EBikeLibrary.DAL;

public partial class eBike_DMIT2018Context : DbContext
{
    internal readonly IEnumerable<object> UnorderedReturnItems;

    public eBike_DMIT2018Context(DbContextOptions<eBike_DMIT2018Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerVehicle> CustomerVehicles { get; set; }

    public virtual DbSet<DatabaseVersion> DatabaseVersions { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Job> Jobs { get; set; }

    public virtual DbSet<JobDetail> JobDetails { get; set; }

    public virtual DbSet<JobDetailPart> JobDetailParts { get; set; }

    public virtual DbSet<Part> Parts { get; set; }

    public virtual DbSet<Position> Positions { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }

    public virtual DbSet<ReceiveOrder> ReceiveOrders { get; set; }

    public virtual DbSet<ReceiveOrderDetail> ReceiveOrderDetails { get; set; }

    public virtual DbSet<ReturnedOrderDetail> ReturnedOrderDetails { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    public virtual DbSet<SaleDetail> SaleDetails { get; set; }

    public virtual DbSet<SaleRefund> SaleRefunds { get; set; }

    public virtual DbSet<SaleRefundDetail> SaleRefundDetails { get; set; }

    public virtual DbSet<StandardJob> StandardJobs { get; set; }

    public virtual DbSet<UnorderedPurchaseItemCart> UnorderedPurchaseItemCarts { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AS");

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK_Categories_CategoryID");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Coupon>(entity =>
        {
            entity.HasKey(e => e.CouponId).HasName("PK_Coupons_CouponID");

            entity.HasIndex(e => e.CouponIdvalue, "UQ_Coupons_CouponIDValue").IsUnique();

            entity.Property(e => e.CouponId).HasColumnName("CouponID");
            entity.Property(e => e.CouponIdvalue)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("CouponIDValue");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK_Customers_CustomerID");

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Address)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContactPhone)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Province)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<CustomerVehicle>(entity =>
        {
            entity.HasKey(e => e.VehicleIdentification).HasName("PK_CustomerVehicles_VehicleIdentification");

            entity.Property(e => e.VehicleIdentification)
                .HasMaxLength(13)
                .IsFixedLength();
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Make)
                .IsRequired()
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.Model)
                .IsRequired()
                .HasMaxLength(30)
                .IsFixedLength();

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerVehicles)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerVehiclesCustomers_CustomerID");
        });

        modelBuilder.Entity<DatabaseVersion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Database__3214EC071E8FD79D");

            entity.ToTable("DatabaseVersion");

            entity.Property(e => e.DateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.EmployeeId).HasName("PK_Employees_EmployeeID");

            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Address)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContactPhone)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.EmailAddress)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Province)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SocialInsuranceNumber)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Position).WithMany(p => p.Employees)
                .HasForeignKey(d => d.PositionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeesPositions_PositionID");
        });

        modelBuilder.Entity<Job>(entity =>
        {
            entity.HasKey(e => e.JobId).HasName("PK_Jobs_JobID");

            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.JobDateDone).HasColumnType("datetime");
            entity.Property(e => e.JobDateIn).HasColumnType("datetime");
            entity.Property(e => e.JobDateOut).HasColumnType("datetime");
            entity.Property(e => e.JobDateStarted).HasColumnType("datetime");
            entity.Property(e => e.ShopRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.VehicleIdentification)
                .IsRequired()
                .HasMaxLength(13)
                .IsFixedLength();

            entity.HasOne(d => d.Employee).WithMany(p => p.Jobs)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobsEmployees_EmployeeID");

            entity.HasOne(d => d.VehicleIdentificationNavigation).WithMany(p => p.Jobs)
                .HasForeignKey(d => d.VehicleIdentification)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobsCustomerVehicles_VehicleIdentification");
        });

        modelBuilder.Entity<JobDetail>(entity =>
        {
            entity.HasKey(e => e.JobDetailId).HasName("PK_JobDetails_JobDetailID");

            entity.Property(e => e.JobDetailId).HasColumnName("JobDetailID");
            entity.Property(e => e.CouponId).HasColumnName("CouponID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.JobHours).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.StatusCode)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("I")
                .IsFixedLength();

            entity.HasOne(d => d.Coupon).WithMany(p => p.JobDetails)
                .HasForeignKey(d => d.CouponId)
                .HasConstraintName("FK_JobDetailsCoupons_CouponID");

            entity.HasOne(d => d.Employee).WithMany(p => p.JobDetails)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_JobDetailsEmployees_EmployeeID");

            entity.HasOne(d => d.Job).WithMany(p => p.JobDetails)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobDetailsJobs_JobID");
        });

        modelBuilder.Entity<JobDetailPart>(entity =>
        {
            entity.HasKey(e => e.JobDetailPartId).HasName("PK_JobDetailParts_JobPartDetailsID");

            entity.Property(e => e.JobDetailPartId).HasColumnName("JobDetailPartID");
            entity.Property(e => e.JobDetailId).HasColumnName("JobDetailID");
            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.SellingPrice).HasColumnType("smallmoney");

            entity.HasOne(d => d.JobDetail).WithMany(p => p.JobDetailParts)
                .HasForeignKey(d => d.JobDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobDetailPartsJobDetails_JobDetailID");

            entity.HasOne(d => d.Part).WithMany(p => p.JobDetailParts)
                .HasForeignKey(d => d.PartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobDetailPartsParts_PartID");
        });

        modelBuilder.Entity<Part>(entity =>
        {
            entity.HasKey(e => e.PartId).HasName("PK_Parts_PartID");

            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.PurchasePrice).HasColumnType("smallmoney");
            entity.Property(e => e.Refundable)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("Y")
                .IsFixedLength();
            entity.Property(e => e.SellingPrice).HasColumnType("smallmoney");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");

            entity.HasOne(d => d.Category).WithMany(p => p.Parts)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartsCategories_CategoryID");

            entity.HasOne(d => d.Vendor).WithMany(p => p.Parts)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartsVendors_VendorID");
        });

        modelBuilder.Entity<Position>(entity =>
        {
            entity.HasKey(e => e.PositionId).HasName("PK_Positions_PositionID");

            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderId).HasName("PK_PurchaseOrders_PurchaseOrderID");

            entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Notes).HasMaxLength(100);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.SubTotal).HasColumnType("money");
            entity.Property(e => e.TaxAmount).HasColumnType("money");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");

            entity.HasOne(d => d.Employee).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrdersEmployees_EmployeeID");

            entity.HasOne(d => d.Vendor).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrdersVednors_VendorID");
        });

        modelBuilder.Entity<PurchaseOrderDetail>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderDetailId).HasName("PK_PurchaseOrderDetails_PurchaseOrderDetailID");

            entity.Property(e => e.PurchaseOrderDetailId).HasColumnName("PurchaseOrderDetailID");
            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");
            entity.Property(e => e.PurchasePrice).HasColumnType("money");
            entity.Property(e => e.VendorPartNumber).HasMaxLength(50);

            entity.HasOne(d => d.Part).WithMany(p => p.PurchaseOrderDetails)
                .HasForeignKey(d => d.PartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderDetailsParts_PartID");

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.PurchaseOrderDetails)
                .HasForeignKey(d => d.PurchaseOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderDetailsPurchaseOrders_PurchaseOrderID");
        });

        modelBuilder.Entity<ReceiveOrder>(entity =>
        {
            entity.HasKey(e => e.ReceiveOrderId).HasName("PK_ReceiveOrders_ReceiveOrderID");

            entity.Property(e => e.ReceiveOrderId).HasColumnName("ReceiveOrderID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");
            entity.Property(e => e.ReceiveDate).HasColumnType("datetime");

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.ReceiveOrders)
                .HasForeignKey(d => d.PurchaseOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReceiveOrdersPurchaseOrders_PurchaseOrderID");
        });

        modelBuilder.Entity<ReceiveOrderDetail>(entity =>
        {
            entity.HasKey(e => e.ReceiveOrderDetailId).HasName("PK_ReceiveOrderDetails_ReceiveOrderDetailID");

            entity.Property(e => e.ReceiveOrderDetailId).HasColumnName("ReceiveOrderDetailID");
            entity.Property(e => e.PurchaseOrderDetailId).HasColumnName("PurchaseOrderDetailID");
            entity.Property(e => e.ReceiveOrderId).HasColumnName("ReceiveOrderID");

            entity.HasOne(d => d.PurchaseOrderDetail).WithMany(p => p.ReceiveOrderDetails)
                .HasForeignKey(d => d.PurchaseOrderDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReceiveOrderDetailsPurchaseOrderDetails_OrderDetailID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.ReceiveOrderDetails)
                .HasForeignKey(d => d.ReceiveOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReceiveOrderDetailsReceiveOrders_ReceiveOrderID");
        });

        modelBuilder.Entity<ReturnedOrderDetail>(entity =>
        {
            entity.HasKey(e => e.ReturnedOrderDetailId).HasName("PK_ReturnedOrderDetails_ReturnOrderDetailID");

            entity.Property(e => e.ReturnedOrderDetailId).HasColumnName("ReturnedOrderDetailID");
            entity.Property(e => e.ItemDescription).HasMaxLength(50);
            entity.Property(e => e.PurchaseOrderDetailId).HasColumnName("PurchaseOrderDetailID");
            entity.Property(e => e.Reason)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ReceiveOrderId).HasColumnName("ReceiveOrderID");
            entity.Property(e => e.VendorPartNumber).HasMaxLength(50);

            entity.HasOne(d => d.PurchaseOrderDetail).WithMany(p => p.ReturnedOrderDetails)
                .HasForeignKey(d => d.PurchaseOrderDetailId)
                .HasConstraintName("FK_ReturnedOrderDetailsPurchaseOrderDetails_OrderDetailID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.ReturnedOrderDetails)
                .HasForeignKey(d => d.ReceiveOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReturnedOrderDetailsReceiveOrders_ReceiveOrderID");
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.HasKey(e => e.SaleId).HasName("PK_Sales_SaleID");

            entity.Property(e => e.SaleId).HasColumnName("SaleID");
            entity.Property(e => e.CouponId).HasColumnName("CouponID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.PaymentType)
                .IsRequired()
                .HasMaxLength(1)
                .IsFixedLength();
            entity.Property(e => e.SaleDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SubTotal).HasColumnType("money");
            entity.Property(e => e.TaxAmount).HasColumnType("money");

            entity.HasOne(d => d.Coupon).WithMany(p => p.Sales)
                .HasForeignKey(d => d.CouponId)
                .HasConstraintName("FK_SalesCoupons_CouponID");

            entity.HasOne(d => d.Employee).WithMany(p => p.Sales)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesEmployees_EmployeeID");
        });

        modelBuilder.Entity<SaleDetail>(entity =>
        {
            entity.HasKey(e => e.SaleDetailId).HasName("PK_SaleDetails_SaleDetailID");

            entity.HasIndex(e => new { e.SaleId, e.PartId }, "UQ_SaleDetails_SaleIDPartID").IsUnique();

            entity.Property(e => e.SaleDetailId).HasColumnName("SaleDetailID");
            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.SaleId).HasColumnName("SaleID");
            entity.Property(e => e.SellingPrice).HasColumnType("money");

            entity.HasOne(d => d.Part).WithMany(p => p.SaleDetails)
                .HasForeignKey(d => d.PartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaleDetailsParts_PartID");

            entity.HasOne(d => d.Sale).WithMany(p => p.SaleDetails)
                .HasForeignKey(d => d.SaleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaleDetailsSalesSaleID");
        });

        modelBuilder.Entity<SaleRefund>(entity =>
        {
            entity.HasKey(e => e.SaleRefundId).HasName("PK_SaleRefunds_SaleRefundID");

            entity.Property(e => e.SaleRefundId).HasColumnName("SaleRefundID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.SaleId).HasColumnName("SaleID");
            entity.Property(e => e.SaleRefundDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SubTotal).HasColumnType("money");
            entity.Property(e => e.TaxAmount).HasColumnType("money");

            entity.HasOne(d => d.Employee).WithMany(p => p.SaleRefunds)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaleRefundsEmployees_EmployeeID");

            entity.HasOne(d => d.Sale).WithMany(p => p.SaleRefunds)
                .HasForeignKey(d => d.SaleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CK_SaleRefundsSales_SaleID");
        });

        modelBuilder.Entity<SaleRefundDetail>(entity =>
        {
            entity.HasKey(e => e.SaleRefundDetailId).HasName("PK_SaleRefundDetails_SaleRefundDetailID");

            entity.HasIndex(e => new { e.SaleRefundId, e.PartId }, "UQ_SaleRefundDetails_SaleRefundIDPartID").IsUnique();

            entity.Property(e => e.SaleRefundDetailId).HasColumnName("SaleRefundDetailID");
            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.Reason).HasMaxLength(150);
            entity.Property(e => e.SaleRefundId).HasColumnName("SaleRefundID");
            entity.Property(e => e.SellingPrice).HasColumnType("money");

            entity.HasOne(d => d.Part).WithMany(p => p.SaleRefundDetails)
                .HasForeignKey(d => d.PartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaleRefundDetailsParts_PartId");

            entity.HasOne(d => d.SaleRefund).WithMany(p => p.SaleRefundDetails)
                .HasForeignKey(d => d.SaleRefundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaleRefundDetailsSaleRefunds_SaleRefundID");
        });

        modelBuilder.Entity<StandardJob>(entity =>
        {
            entity.HasKey(e => e.StandardJobId).HasName("PK_StandardJobs_StandardJobID");

            entity.Property(e => e.StandardJobId).HasColumnName("StandardJobID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StandardHours).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<UnorderedPurchaseItemCart>(entity =>
        {
            entity.HasKey(e => e.CartId).HasName("PK__Unordere__51BCD79712C6A21A");

            entity.ToTable("UnorderedPurchaseItemCart");

            entity.Property(e => e.CartId).HasColumnName("CartID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.VendorPartNumber)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.VendorId).HasName("PK_Vendors_VendorID");

            entity.Property(e => e.VendorId).HasColumnName("VendorID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(12);
            entity.Property(e => e.PostalCode)
                .IsRequired()
                .HasMaxLength(6)
                .IsFixedLength();
            entity.Property(e => e.ProvinceId)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("AB")
                .IsFixedLength()
                .HasColumnName("ProvinceID");
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(100);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}